From a02bef5a69d7fe57a138e40740e68182c8a053cb Mon Sep 17 00:00:00 2001
From: Lewis Valentine <lewis.valentine@gmail.com>
Date: Thu, 28 Apr 2011 15:22:53 -0700
Subject: [PATCH 1/6] Implemented the two system calls
 sys_get_slob_amt_claimed() and sys_get_slob_amt_free()

---
 linux-2.6.34.7/mm/slob.c |   20 +++++++++++++++++++-
 1 files changed, 19 insertions(+), 1 deletions(-)

diff --git a/linux-2.6.34.7/mm/slob.c b/linux-2.6.34.7/mm/slob.c
index 837ebd6..a5e7036 100644
--- a/linux-2.6.34.7/mm/slob.c
+++ b/linux-2.6.34.7/mm/slob.c
@@ -84,6 +84,11 @@ typedef s16 slobidx_t;
 typedef s32 slobidx_t;
 #endif
 
+/*Globals for sys calls*/
+static unsigned int pageClaim;
+static unsigned int assignmentClaim;
+
+
 struct slob_block {
 	slobidx_t units;
 };
@@ -348,6 +353,7 @@ static void *slob_alloc(size_t size, gfp_t gfp, int align, int node)
 
 		/* Attempt to alloc */
 		prev = sp->list.prev;
+		assignmentClaim = assignmentClaim + size; //allocated some memory
 		b = slob_page_alloc(sp, size, align);
 		if (!b)
 			continue;
@@ -364,6 +370,7 @@ static void *slob_alloc(size_t size, gfp_t gfp, int align, int node)
 
 	/* Not enough space: must allocate a new page */
 	if (!b) {
+		pageClaim = pageClaim + PAGE_SIZE; //page allocated
 		b = slob_new_pages(gfp & ~__GFP_ZERO, 0, node);
 		if (!b)
 			return NULL;
@@ -398,9 +405,9 @@ static void slob_free(void *block, int size)
 	if (unlikely(ZERO_OR_NULL_PTR(block)))
 		return;
 	BUG_ON(!size);
-
 	sp = slob_page(block);
 	units = SLOB_UNITS(size);
+	assignmentClaim = assignmentClaim - size; //assigned memory freed
 
 	spin_lock_irqsave(&slob_lock, flags);
 
@@ -412,6 +419,7 @@ static void slob_free(void *block, int size)
 		clear_slob_page(sp);
 		free_slob_page(sp);
 		slob_free_pages(b, 0);
+		pageClaim = pageClaim - PAGE_SIZE; //assigned page freed
 		return;
 	}
 
@@ -697,3 +705,13 @@ void __init kmem_cache_init_late(void)
 {
 	/* Nothing to do */
 }
+
+unsigned int sys_get_slob_amt_free(void)
+{
+	return pageClaim - assignmentClaim; //return the size of the pages minus the amount we've given away, the amount free
+}
+unsigned int sys_get_slob_amt_claimed(void)
+{
+	return pageClaim; //Return the size of the allocated pages.
+}
+
-- 
1.7.4.4


From 5de43434d5948adcd81303924b71e8620d1d8391 Mon Sep 17 00:00:00 2001
From: Daniel Urbanski <urbanski@gmail.com>
Date: Fri, 29 Apr 2011 15:23:23 -0700
Subject: [PATCH 2/6] Defined new syscalls

---
 linux-2.6.34.7/arch/x86/include/asm/unistd_32.h |    2 ++
 1 files changed, 2 insertions(+), 0 deletions(-)

diff --git a/linux-2.6.34.7/arch/x86/include/asm/unistd_32.h b/linux-2.6.34.7/arch/x86/include/asm/unistd_32.h
index beb9b5f..5f49d98 100644
--- a/linux-2.6.34.7/arch/x86/include/asm/unistd_32.h
+++ b/linux-2.6.34.7/arch/x86/include/asm/unistd_32.h
@@ -343,6 +343,8 @@
 #define __NR_rt_tgsigqueueinfo	335
 #define __NR_perf_event_open	336
 #define __NR_recvmmsg		337
+#define __NR_get_slob_amt_free	338
+#define __NR_get_slob_amt_claimed	339
 
 #ifdef __KERNEL__
 
-- 
1.7.4.4


From 53ba13a2d7fe37e571d2f3a98831f686e8674d4c Mon Sep 17 00:00:00 2001
From: Daniel Urbanski <urbanski@gmail.com>
Date: Fri, 29 Apr 2011 15:49:46 -0700
Subject: [PATCH 3/6] changed ignore file to modify syscall table

---
 linux-2.6.34.7/arch/x86/kernel/.gitignore |    1 -
 1 files changed, 0 insertions(+), 1 deletions(-)

diff --git a/linux-2.6.34.7/arch/x86/kernel/.gitignore b/linux-2.6.34.7/arch/x86/kernel/.gitignore
index 08f4fd7..60e1ccd 100644
--- a/linux-2.6.34.7/arch/x86/kernel/.gitignore
+++ b/linux-2.6.34.7/arch/x86/kernel/.gitignore
@@ -1,3 +1,2 @@
 vsyscall.lds
-vsyscall_32.lds
 vmlinux.lds
-- 
1.7.4.4


From 2511486ab6ddfd1c4803987597d4de514681ba63 Mon Sep 17 00:00:00 2001
From: Daniel Urbanski <urbanski@gmail.com>
Date: Fri, 29 Apr 2011 15:52:15 -0700
Subject: [PATCH 4/6] Added syscall table

---
 linux-2.6.34.7/arch/x86/kernel/syscall_table_32.S |  341 +++++++++++++++++++++
 1 files changed, 341 insertions(+), 0 deletions(-)
 create mode 100644 linux-2.6.34.7/arch/x86/kernel/syscall_table_32.S

diff --git a/linux-2.6.34.7/arch/x86/kernel/syscall_table_32.S b/linux-2.6.34.7/arch/x86/kernel/syscall_table_32.S
new file mode 100644
index 0000000..57b7089
--- /dev/null
+++ b/linux-2.6.34.7/arch/x86/kernel/syscall_table_32.S
@@ -0,0 +1,341 @@
+ENTRY(sys_call_table)
+	.long sys_restart_syscall	/* 0 - old "setup()" system call, used for restarting */
+	.long sys_exit
+	.long ptregs_fork
+	.long sys_read
+	.long sys_write
+	.long sys_open		/* 5 */
+	.long sys_close
+	.long sys_waitpid
+	.long sys_creat
+	.long sys_link
+	.long sys_unlink	/* 10 */
+	.long ptregs_execve
+	.long sys_chdir
+	.long sys_time
+	.long sys_mknod
+	.long sys_chmod		/* 15 */
+	.long sys_lchown16
+	.long sys_ni_syscall	/* old break syscall holder */
+	.long sys_stat
+	.long sys_lseek
+	.long sys_getpid	/* 20 */
+	.long sys_mount
+	.long sys_oldumount
+	.long sys_setuid16
+	.long sys_getuid16
+	.long sys_stime		/* 25 */
+	.long sys_ptrace
+	.long sys_alarm
+	.long sys_fstat
+	.long sys_pause
+	.long sys_utime		/* 30 */
+	.long sys_ni_syscall	/* old stty syscall holder */
+	.long sys_ni_syscall	/* old gtty syscall holder */
+	.long sys_access
+	.long sys_nice
+	.long sys_ni_syscall	/* 35 - old ftime syscall holder */
+	.long sys_sync
+	.long sys_kill
+	.long sys_rename
+	.long sys_mkdir
+	.long sys_rmdir		/* 40 */
+	.long sys_dup
+	.long sys_pipe
+	.long sys_times
+	.long sys_ni_syscall	/* old prof syscall holder */
+	.long sys_brk		/* 45 */
+	.long sys_setgid16
+	.long sys_getgid16
+	.long sys_signal
+	.long sys_geteuid16
+	.long sys_getegid16	/* 50 */
+	.long sys_acct
+	.long sys_umount	/* recycled never used phys() */
+	.long sys_ni_syscall	/* old lock syscall holder */
+	.long sys_ioctl
+	.long sys_fcntl		/* 55 */
+	.long sys_ni_syscall	/* old mpx syscall holder */
+	.long sys_setpgid
+	.long sys_ni_syscall	/* old ulimit syscall holder */
+	.long sys_olduname
+	.long sys_umask		/* 60 */
+	.long sys_chroot
+	.long sys_ustat
+	.long sys_dup2
+	.long sys_getppid
+	.long sys_getpgrp	/* 65 */
+	.long sys_setsid
+	.long sys_sigaction
+	.long sys_sgetmask
+	.long sys_ssetmask
+	.long sys_setreuid16	/* 70 */
+	.long sys_setregid16
+	.long sys_sigsuspend
+	.long sys_sigpending
+	.long sys_sethostname
+	.long sys_setrlimit	/* 75 */
+	.long sys_old_getrlimit
+	.long sys_getrusage
+	.long sys_gettimeofday
+	.long sys_settimeofday
+	.long sys_getgroups16	/* 80 */
+	.long sys_setgroups16
+	.long sys_old_select
+	.long sys_symlink
+	.long sys_lstat
+	.long sys_readlink	/* 85 */
+	.long sys_uselib
+	.long sys_swapon
+	.long sys_reboot
+	.long sys_old_readdir
+	.long sys_old_mmap	/* 90 */
+	.long sys_munmap
+	.long sys_truncate
+	.long sys_ftruncate
+	.long sys_fchmod
+	.long sys_fchown16	/* 95 */
+	.long sys_getpriority
+	.long sys_setpriority
+	.long sys_ni_syscall	/* old profil syscall holder */
+	.long sys_statfs
+	.long sys_fstatfs	/* 100 */
+	.long sys_ioperm
+	.long sys_socketcall
+	.long sys_syslog
+	.long sys_setitimer
+	.long sys_getitimer	/* 105 */
+	.long sys_newstat
+	.long sys_newlstat
+	.long sys_newfstat
+	.long sys_uname
+	.long ptregs_iopl	/* 110 */
+	.long sys_vhangup
+	.long sys_ni_syscall	/* old "idle" system call */
+	.long ptregs_vm86old
+	.long sys_wait4
+	.long sys_swapoff	/* 115 */
+	.long sys_sysinfo
+	.long sys_ipc
+	.long sys_fsync
+	.long ptregs_sigreturn
+	.long ptregs_clone	/* 120 */
+	.long sys_setdomainname
+	.long sys_newuname
+	.long sys_modify_ldt
+	.long sys_adjtimex
+	.long sys_mprotect	/* 125 */
+	.long sys_sigprocmask
+	.long sys_ni_syscall	/* old "create_module" */
+	.long sys_init_module
+	.long sys_delete_module
+	.long sys_ni_syscall	/* 130:	old "get_kernel_syms" */
+	.long sys_quotactl
+	.long sys_getpgid
+	.long sys_fchdir
+	.long sys_bdflush
+	.long sys_sysfs		/* 135 */
+	.long sys_personality
+	.long sys_ni_syscall	/* reserved for afs_syscall */
+	.long sys_setfsuid16
+	.long sys_setfsgid16
+	.long sys_llseek	/* 140 */
+	.long sys_getdents
+	.long sys_select
+	.long sys_flock
+	.long sys_msync
+	.long sys_readv		/* 145 */
+	.long sys_writev
+	.long sys_getsid
+	.long sys_fdatasync
+	.long sys_sysctl
+	.long sys_mlock		/* 150 */
+	.long sys_munlock
+	.long sys_mlockall
+	.long sys_munlockall
+	.long sys_sched_setparam
+	.long sys_sched_getparam   /* 155 */
+	.long sys_sched_setscheduler
+	.long sys_sched_getscheduler
+	.long sys_sched_yield
+	.long sys_sched_get_priority_max
+	.long sys_sched_get_priority_min  /* 160 */
+	.long sys_sched_rr_get_interval
+	.long sys_nanosleep
+	.long sys_mremap
+	.long sys_setresuid16
+	.long sys_getresuid16	/* 165 */
+	.long ptregs_vm86
+	.long sys_ni_syscall	/* Old sys_query_module */
+	.long sys_poll
+	.long sys_nfsservctl
+	.long sys_setresgid16	/* 170 */
+	.long sys_getresgid16
+	.long sys_prctl
+	.long ptregs_rt_sigreturn
+	.long sys_rt_sigaction
+	.long sys_rt_sigprocmask	/* 175 */
+	.long sys_rt_sigpending
+	.long sys_rt_sigtimedwait
+	.long sys_rt_sigqueueinfo
+	.long sys_rt_sigsuspend
+	.long sys_pread64	/* 180 */
+	.long sys_pwrite64
+	.long sys_chown16
+	.long sys_getcwd
+	.long sys_capget
+	.long sys_capset	/* 185 */
+	.long ptregs_sigaltstack
+	.long sys_sendfile
+	.long sys_ni_syscall	/* reserved for streams1 */
+	.long sys_ni_syscall	/* reserved for streams2 */
+	.long ptregs_vfork	/* 190 */
+	.long sys_getrlimit
+	.long sys_mmap_pgoff
+	.long sys_truncate64
+	.long sys_ftruncate64
+	.long sys_stat64	/* 195 */
+	.long sys_lstat64
+	.long sys_fstat64
+	.long sys_lchown
+	.long sys_getuid
+	.long sys_getgid	/* 200 */
+	.long sys_geteuid
+	.long sys_getegid
+	.long sys_setreuid
+	.long sys_setregid
+	.long sys_getgroups	/* 205 */
+	.long sys_setgroups
+	.long sys_fchown
+	.long sys_setresuid
+	.long sys_getresuid
+	.long sys_setresgid	/* 210 */
+	.long sys_getresgid
+	.long sys_chown
+	.long sys_setuid
+	.long sys_setgid
+	.long sys_setfsuid	/* 215 */
+	.long sys_setfsgid
+	.long sys_pivot_root
+	.long sys_mincore
+	.long sys_madvise
+	.long sys_getdents64	/* 220 */
+	.long sys_fcntl64
+	.long sys_ni_syscall	/* reserved for TUX */
+	.long sys_ni_syscall
+	.long sys_gettid
+	.long sys_readahead	/* 225 */
+	.long sys_setxattr
+	.long sys_lsetxattr
+	.long sys_fsetxattr
+	.long sys_getxattr
+	.long sys_lgetxattr	/* 230 */
+	.long sys_fgetxattr
+	.long sys_listxattr
+	.long sys_llistxattr
+	.long sys_flistxattr
+	.long sys_removexattr	/* 235 */
+	.long sys_lremovexattr
+	.long sys_fremovexattr
+	.long sys_tkill
+	.long sys_sendfile64
+	.long sys_futex		/* 240 */
+	.long sys_sched_setaffinity
+	.long sys_sched_getaffinity
+	.long sys_set_thread_area
+	.long sys_get_thread_area
+	.long sys_io_setup	/* 245 */
+	.long sys_io_destroy
+	.long sys_io_getevents
+	.long sys_io_submit
+	.long sys_io_cancel
+	.long sys_fadvise64	/* 250 */
+	.long sys_ni_syscall
+	.long sys_exit_group
+	.long sys_lookup_dcookie
+	.long sys_epoll_create
+	.long sys_epoll_ctl	/* 255 */
+	.long sys_epoll_wait
+ 	.long sys_remap_file_pages
+ 	.long sys_set_tid_address
+ 	.long sys_timer_create
+ 	.long sys_timer_settime		/* 260 */
+ 	.long sys_timer_gettime
+ 	.long sys_timer_getoverrun
+ 	.long sys_timer_delete
+ 	.long sys_clock_settime
+ 	.long sys_clock_gettime		/* 265 */
+ 	.long sys_clock_getres
+ 	.long sys_clock_nanosleep
+	.long sys_statfs64
+	.long sys_fstatfs64
+	.long sys_tgkill	/* 270 */
+	.long sys_utimes
+ 	.long sys_fadvise64_64
+	.long sys_ni_syscall	/* sys_vserver */
+	.long sys_mbind
+	.long sys_get_mempolicy
+	.long sys_set_mempolicy
+	.long sys_mq_open
+	.long sys_mq_unlink
+	.long sys_mq_timedsend
+	.long sys_mq_timedreceive	/* 280 */
+	.long sys_mq_notify
+	.long sys_mq_getsetattr
+	.long sys_kexec_load
+	.long sys_waitid
+	.long sys_ni_syscall		/* 285 */ /* available */
+	.long sys_add_key
+	.long sys_request_key
+	.long sys_keyctl
+	.long sys_ioprio_set
+	.long sys_ioprio_get		/* 290 */
+	.long sys_inotify_init
+	.long sys_inotify_add_watch
+	.long sys_inotify_rm_watch
+	.long sys_migrate_pages
+	.long sys_openat		/* 295 */
+	.long sys_mkdirat
+	.long sys_mknodat
+	.long sys_fchownat
+	.long sys_futimesat
+	.long sys_fstatat64		/* 300 */
+	.long sys_unlinkat
+	.long sys_renameat
+	.long sys_linkat
+	.long sys_symlinkat
+	.long sys_readlinkat		/* 305 */
+	.long sys_fchmodat
+	.long sys_faccessat
+	.long sys_pselect6
+	.long sys_ppoll
+	.long sys_unshare		/* 310 */
+	.long sys_set_robust_list
+	.long sys_get_robust_list
+	.long sys_splice
+	.long sys_sync_file_range
+	.long sys_tee			/* 315 */
+	.long sys_vmsplice
+	.long sys_move_pages
+	.long sys_getcpu
+	.long sys_epoll_pwait
+	.long sys_utimensat		/* 320 */
+	.long sys_signalfd
+	.long sys_timerfd_create
+	.long sys_eventfd
+	.long sys_fallocate
+	.long sys_timerfd_settime	/* 325 */
+	.long sys_timerfd_gettime
+	.long sys_signalfd4
+	.long sys_eventfd2
+	.long sys_epoll_create1
+	.long sys_dup3			/* 330 */
+	.long sys_pipe2
+	.long sys_inotify_init1
+	.long sys_preadv
+	.long sys_pwritev
+	.long sys_rt_tgsigqueueinfo	/* 335 */
+	.long sys_perf_event_open
+	.long sys_recvmmsg
+	.long sys_get_slob_amt_free		/* 338 */
+	.long sys_get_slob_amt_claimed	/* 339 */
-- 
1.7.4.4


From 8f8360ad3b18fd513fe9580b2ad189f37a9e0f15 Mon Sep 17 00:00:00 2001
From: urbanyeti <urbanski@gmail.com>
Date: Fri, 29 Apr 2011 15:55:44 -0700
Subject: [PATCH 5/6] Edited linux-2.6.34.7/arch/x86/kernel/.gitignore via
 GitHub

---
 linux-2.6.34.7/arch/x86/kernel/.gitignore |    3 ++-
 1 files changed, 2 insertions(+), 1 deletions(-)

diff --git a/linux-2.6.34.7/arch/x86/kernel/.gitignore b/linux-2.6.34.7/arch/x86/kernel/.gitignore
index 60e1ccd..a4791a5 100644
--- a/linux-2.6.34.7/arch/x86/kernel/.gitignore
+++ b/linux-2.6.34.7/arch/x86/kernel/.gitignore
@@ -1,2 +1,3 @@
 vsyscall.lds
-vmlinux.lds
+vsyscall_32.lds
+vmlinux.lds
\ No newline at end of file
-- 
1.7.4.4


From 1c8bb4f56a13f0c0ac2c9d7720042e4edf3ee795 Mon Sep 17 00:00:00 2001
From: Daniel Urbanski <urbanski@gmail.com>
Date: Fri, 29 Apr 2011 16:57:45 -0700
Subject: [PATCH 6/6] Fixed syscall definitions in slob and update number of
 syscalls.

---
 linux-2.6.34.7/arch/x86/include/asm/unistd_32.h |    2 +-
 linux-2.6.34.7/arch/x86/kernel/.gitignore       |    2 +-
 linux-2.6.34.7/mm/slob.c                        |    5 +++--
 3 files changed, 5 insertions(+), 4 deletions(-)

diff --git a/linux-2.6.34.7/arch/x86/include/asm/unistd_32.h b/linux-2.6.34.7/arch/x86/include/asm/unistd_32.h
index 5f49d98..b9a0c32 100644
--- a/linux-2.6.34.7/arch/x86/include/asm/unistd_32.h
+++ b/linux-2.6.34.7/arch/x86/include/asm/unistd_32.h
@@ -348,7 +348,7 @@
 
 #ifdef __KERNEL__
 
-#define NR_syscalls 338
+#define NR_syscalls 340
 
 #define __ARCH_WANT_IPC_PARSE_VERSION
 #define __ARCH_WANT_OLD_READDIR
diff --git a/linux-2.6.34.7/arch/x86/kernel/.gitignore b/linux-2.6.34.7/arch/x86/kernel/.gitignore
index a4791a5..08f4fd7 100644
--- a/linux-2.6.34.7/arch/x86/kernel/.gitignore
+++ b/linux-2.6.34.7/arch/x86/kernel/.gitignore
@@ -1,3 +1,3 @@
 vsyscall.lds
 vsyscall_32.lds
-vmlinux.lds
\ No newline at end of file
+vmlinux.lds
diff --git a/linux-2.6.34.7/mm/slob.c b/linux-2.6.34.7/mm/slob.c
index a5e7036..2522080 100644
--- a/linux-2.6.34.7/mm/slob.c
+++ b/linux-2.6.34.7/mm/slob.c
@@ -68,6 +68,7 @@
 #include <linux/list.h>
 #include <linux/kmemtrace.h>
 #include <linux/kmemleak.h>
+#include <linux/linkage.h>
 #include <asm/atomic.h>
 
 /*
@@ -706,11 +707,11 @@ void __init kmem_cache_init_late(void)
 	/* Nothing to do */
 }
 
-unsigned int sys_get_slob_amt_free(void)
+asmlinkage unsigned int sys_get_slob_amt_free(void)
 {
 	return pageClaim - assignmentClaim; //return the size of the pages minus the amount we've given away, the amount free
 }
-unsigned int sys_get_slob_amt_claimed(void)
+asmlinkage unsigned int sys_get_slob_amt_claimed(void)
 {
 	return pageClaim; //Return the size of the allocated pages.
 }
-- 
1.7.4.4

